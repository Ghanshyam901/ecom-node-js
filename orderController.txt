import CartModel from "../models/Cart.js";
import OrderModel from "../models/Order.js";


class OrderController {


    
    // Place Order
    static PlaceOrder = async (req, res) => {

        const { addressId } = req.body;
        try {
            // Fetch the cart associated with the user and populate the product details
            const cart = await CartModel.findOne({ user: req.user._id }).populate('products.product');
            // console.log("cart", cart);
            if (!cart || cart.products.length === 0) {
                return res.status(400).json({ message: 'Cart is empty' });
            }

            // Check stock availability for each product in the cart
            for (let cartItem of cart.products) {
                console.log(cartItem)
                const product = cartItem.product;
                if (product.stock < cartItem.quantity) {
                    return res.status(400).json({ message: `Insufficient stock for ${product.name}` });
                }
            }

            // Decrease stock for each product in the cart
            for (let cartItem of cart.products) {
                const product = cartItem.product;
                product.stock -= cartItem.quantity;
                await product.save();  // Update the stock in the database
            }

            // Create a new order after stock is updated
            const order = new OrderModel({
                user: req.user._id,
                items: cart.products,
                totalAmount: cart.totalPrice,
                address: addressId
            });
            await order.save();

            // Empty the cart after placing the order
            cart.products = [];
            cart.totalPrice = 0;
            await cart.save();

            res.status(200).json({ message: 'Order placed successfully', order });
        } catch (error) {
            res.status(500).json({ error: 'Failed to place order' });
        }
    }

    // Get User Orders

    static GetUserOrders = async (req, res) => {
        try {
            const orders = await OrderModel.find({ user: req.user._id });
            res.status(200).json(orders);
        } catch (error) {
            res.status(500).json({ error: 'Failed to fetch orders' });
        }
    }

    

}


export default OrderController;